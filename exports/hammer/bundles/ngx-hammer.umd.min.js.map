{"version":3,"sources":["ng://ngx-hammer/lib/hammer.directive.ts","ng://ngx-hammer/lib/hammer.module.ts"],"names":["gestures","directions","HammerDirective","el","this","EventEmitter","prototype","ngOnChanges","changes","currentValue","createHammerManager","createHammerRecognizer","ngOnDestroy","mc","elementInstance","hammer","handler","off","ngHammer","event","Object","keys","handlers","length","destroy","nativeElement","Hammer","Manager","recognizer","recognizerType","find","gesture","get","capitalize","recognizeWith","recognizers","add","options","direction","guardDirections","on","trigger","bind","console","warn","e","eventTriggered","emit","str","charAt","toUpperCase","slice","hammerDirection","indexOf","hasOwnProperty","Directive","args","selector","ElementRef","Input","Output","HammerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"uZAaA,IAAMA,EAAW,CAAC,MAAO,MAAO,QAAS,QAAS,SAAU,SACtDC,EAAa,CACjB,KACA,OACA,OACA,QACA,aACA,WACA,oBAeA,SAAAC,EAAoBC,GAAAC,KAAAD,GAAAA,sBAJH,IAAIE,EAAAA,oBAMrBH,EAAAI,UAAAC,YAAA,SAAYC,GACNA,GAAWA,EAAO,UAAaA,EAAO,SAAUC,eAClDL,KAAKM,sBACLN,KAAKO,2BAITT,EAAAI,UAAAM,YAAA,WACE,IAAIC,EAAaT,KAAKU,gBAAgBC,OAClCF,EAAGG,SACLH,EAAGE,OAAOE,IAAIb,KAAKc,SAASC,MAAON,EAAGG,SAEnCI,OAAOC,KAAKR,EAAGS,UAAUC,SAC5BV,EAAGW,UACHX,EAAK,OAITX,EAAAI,UAAAI,oBAAA,WACEN,KAAKU,gBAAkBV,KAAKD,GAAGsB,cAC1BrB,KAAKU,gBAAgBC,SACxBX,KAAKU,gBAAgBC,OAAS,IAAIW,EAAOC,QAAQvB,KAAKU,mBAI1DZ,EAAAI,UAAAK,uBAAA,WACE,IASIiB,EAAYC,EATVhB,EAAaT,KAAKU,gBAAgBC,OAGlCI,EAAQf,KAAKc,SAASC,MACvBA,GAMLU,EAAiB7B,EAAS8B,KAAK,SAAAC,GAAW,OAAAA,IAAYZ,OAKtDS,EAAaf,EAAGmB,IAAIH,OAElBD,EAAa,IAAIF,EAAQtB,KAAK6B,WAAWJ,MAC9BK,cAAcrB,EAAGsB,aAC5BtB,EAAGuB,IAAIR,IAGTA,EAAWS,QAAQC,UAAYlC,KAAKmC,gBAClCnC,KAAKc,SAASoB,WAGhBzB,EAAG2B,GAAGrB,EAAQN,EAAGG,QAAUZ,KAAKqC,QAAQC,KAAKtC,QAd3CuC,QAAQC,KAAK,oCAAsCzB,GAPnDwB,QAAQC,KAAK,kDAwBT1C,EAAAI,UAAAmC,iBAAQI,GACdzC,KAAK0C,eAAeC,KAAKF,IAGnB3C,EAAAI,UAAA2B,oBAAWe,GACjB,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,IAGzCjD,EAAAI,UAAAiC,yBAAgBD,GACtB,GAAyB,iBAAdA,EAAwB,CACjC,IAAMc,EAAkB,aAAed,EAAUY,cACjD,IACmC,EAAjCjD,EAAWoD,QAAQf,IACnBZ,EAAO4B,eAAeF,GAEtB,OAAO1B,EAAO0B,GAEdT,QAAQC,KAAK,mCAAqCN,yBAtFzDiB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0DArBVC,EAAAA,gDAwBCC,EAAAA,8BAGAC,EAAAA,eC/BHC,EAAA,oDAICC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC/D,GACfgE,QAAS,CAAChE,SAPZ","sourcesContent":["import Hammer from 'hammerjs';\nimport {\n  Directive,\n  Input,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { NgHammerConfig } from './model';\n\nconst gestures = ['tap', 'pan', 'pinch', 'press', 'rotate', 'swipe'];\nconst directions = [\n  'up',\n  'down',\n  'left',\n  'right',\n  'horizontal',\n  'vertical',\n  'all'\n];\n\n@Directive({\n  selector: '[ngHammer]'\n})\nexport class HammerDirective implements OnChanges, OnDestroy {\n  @Input()\n  ngHammer: NgHammerConfig;\n\n  @Output()\n  eventTriggered = new EventEmitter();\n\n  elementInstance: any;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes && changes.ngHammer && changes.ngHammer.currentValue) {\n      this.createHammerManager();\n      this.createHammerRecognizer();\n    }\n  }\n\n  ngOnDestroy() {\n    let mc: Hammer = this.elementInstance.hammer;\n    if (mc.handler) {\n      mc.hammer.off(this.ngHammer.event, mc.handler);\n    }\n    if (!Object.keys(mc.handlers).length) {\n      mc.destroy();\n      mc = null;\n    }\n  }\n\n  createHammerManager() {\n    this.elementInstance = this.el.nativeElement;\n    if (!this.elementInstance.hammer) {\n      this.elementInstance.hammer = new Hammer.Manager(this.elementInstance);\n    }\n  }\n\n  createHammerRecognizer() {\n    const mc: Hammer = this.elementInstance.hammer;\n\n    // determine event type\n    const event = this.ngHammer.event;\n    if (!event) {\n      console.warn('[ngx-hammer] event type argument is required.');\n      return;\n    }\n\n    let recognizer, recognizerType;\n    recognizerType = gestures.find(gesture => gesture === event);\n    if (!recognizerType) {\n      console.warn('[ngx-hammer] invalid event type: ' + event);\n      return;\n    }\n    recognizer = mc.get(recognizerType);\n    if (!recognizer) {\n      recognizer = new Hammer[(this.capitalize(recognizerType))]();\n      recognizer.recognizeWith(mc.recognizers);\n      mc.add(recognizer);\n    }\n\n    recognizer.options.direction = this.guardDirections(\n      this.ngHammer.direction\n    );\n\n    mc.on(event, (mc.handler = this.trigger.bind(this)));\n  }\n\n  private trigger(e) {\n    this.eventTriggered.emit(e);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private guardDirections(direction: string) {\n    if (typeof direction === 'string') {\n      const hammerDirection = 'DIRECTION_' + direction.toUpperCase();\n      if (\n        directions.indexOf(direction) > -1 &&\n        Hammer.hasOwnProperty(hammerDirection)\n      ) {\n        return Hammer[hammerDirection];\n      } else {\n        console.warn('[ngx-hammer] invalid direction: ' + direction);\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HammerDirective } from './hammer.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [HammerDirective],\n  exports: [HammerDirective]\n})\nexport class HammerModule {}\n"]}