{"version":3,"file":"ngx-hammer.js.map","sources":["ng://ngx-hammer/lib/hammer.directive.ts","ng://ngx-hammer/lib/hammer.module.ts"],"sourcesContent":["import Hammer from 'hammerjs';\nimport {\n  Directive,\n  Input,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { NgHammerConfig } from './model';\n\nconst gestures = ['tap', 'pan', 'pinch', 'press', 'rotate', 'swipe'];\nconst directions = [\n  'up',\n  'down',\n  'left',\n  'right',\n  'horizontal',\n  'vertical',\n  'all'\n];\n\n@Directive({\n  selector: '[ngHammer]'\n})\nexport class HammerDirective implements OnChanges, OnDestroy {\n  @Input()\n  ngHammer: NgHammerConfig;\n\n  @Output()\n  eventTriggered = new EventEmitter();\n\n  elementInstance: any;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes && changes.ngHammer && changes.ngHammer.currentValue) {\n      this.createHammerManager();\n      this.createHammerRecognizer();\n    }\n  }\n\n  ngOnDestroy() {\n    let mc: Hammer = this.elementInstance.hammer;\n    if (mc.handler) {\n      mc.hammer.off(this.ngHammer.event, mc.handler);\n    }\n    if (!Object.keys(mc.handlers).length) {\n      mc.destroy();\n      mc = null;\n    }\n  }\n\n  createHammerManager() {\n    this.elementInstance = this.el.nativeElement;\n    if (!this.elementInstance.hammer) {\n      this.elementInstance.hammer = new Hammer.Manager(this.elementInstance);\n    }\n  }\n\n  createHammerRecognizer() {\n    const mc: Hammer = this.elementInstance.hammer;\n\n    // determine event type\n    const event = this.ngHammer.event;\n    if (!event) {\n      console.warn('[ngx-hammer] event type argument is required.');\n      return;\n    }\n\n    let recognizer, recognizerType;\n    recognizerType = gestures.find(gesture => gesture === event);\n    if (!recognizerType) {\n      console.warn('[ngx-hammer] invalid event type: ' + event);\n      return;\n    }\n    recognizer = mc.get(recognizerType);\n    if (!recognizer) {\n      recognizer = new Hammer[(this.capitalize(recognizerType))]();\n      recognizer.recognizeWith(mc.recognizers);\n      mc.add(recognizer);\n    }\n\n    recognizer.options.direction = this.guardDirections(\n      this.ngHammer.direction\n    );\n\n    mc.on(event, (mc.handler = this.trigger.bind(this)));\n  }\n\n  private trigger(e) {\n    this.eventTriggered.emit(e);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private guardDirections(direction: string) {\n    if (typeof direction === 'string') {\n      const hammerDirection = 'DIRECTION_' + direction.toUpperCase();\n      if (\n        directions.indexOf(direction) > -1 &&\n        Hammer.hasOwnProperty(hammerDirection)\n      ) {\n        return Hammer[hammerDirection];\n      } else {\n        console.warn('[ngx-hammer] invalid direction: ' + direction);\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HammerDirective } from './hammer.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [HammerDirective],\n  exports: [HammerDirective]\n})\nexport class HammerModule {}\n"],"names":[],"mappings":"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"}
